AWSTemplateFormatVersion: '2010-09-09'

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: AllowS3GetObject
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: S3ProxyApi
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        #- '*/*'
        - 'image/png'

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: '{filename}'

  ApiGatewayImageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: images

  ApiGatewayImageFileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayImageResource
      PathPart: '{name}'

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.filename: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${S3Bucket}/{filename}'
        Credentials: !GetAtt ApiGatewayRole.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          'integration.request.path.filename': 'method.request.path.filename'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Content-Type': 'integration.response.header.Content-Type'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            'method.response.header.Content-Type': true

  ApiGatewayImageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayImageFileResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.name: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${S3Bucket}/{name}.png'
        Credentials: !GetAtt ApiGatewayRole.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          'integration.request.path.name': 'method.request.path.name'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Content-Type': 'integration.response.header.Content-Type'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            'method.response.header.Content-Type': true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayImageMethod